<shader>

	<inputs>
		<input name="albedoMap" type="texture" address="wrap" />
		<input name="normalMap" type="texture" address="wrap" />
		<input name="specularMap" type="texture" address="wrap" />
		<input name="emissiveMap" type="texture" address="wrap" srgb="true"/>
		<input name="opacityMap" type="texture" address="wrap" />
        <input name="decals" type="float">1.0</input>
        <input name="emissiveMod" type="float">1.0</input>
		<input name="transmissionColor" type="float3">(1, 1, 1)</input>
	</inputs>

    <params>
        <param name="translucent">true</param>
		<param name="vsPosition">true</param>
		<param name="vsNormal">true</param>
    </params>
	<code>
	<![CDATA[
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
			return n.xyz;
		}
		void MaterialShader(in Material_Input input, inout Material material)
		{
			//--float opacity = 1 - tex2D(opacityMap, input.texCoord).a;
			material.transmissionColor = tex2D(albedoMap, input.texCoord).rgb;
            material.tsNormal 	=  1 - tex2D(albedoMap, input.texCoord).rgb * 0.005 * sin(time);
			material.ssDistortion = DecodeNormal( tex2D(normalMap, input.texCoord) ).xy * float2(1, -1) * 0.005 * sin(time);

			material.id         = decals;
		}
	]]>
	</code>

</shader>